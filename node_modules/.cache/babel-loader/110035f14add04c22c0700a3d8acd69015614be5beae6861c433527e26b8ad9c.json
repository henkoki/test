{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\study\\\\gymspotcheck\\\\src\\\\ResultsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultsPage = () => {\n  _s();\n  const [trafficData, setTrafficData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [debugInfo, setDebugInfo] = useState(null);\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const name = searchParams.get('name');\n    const address = searchParams.get('address');\n    const fetchTrafficData = async () => {\n      setDebugInfo(null);\n      try {\n        const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n        const apiKey = 'pri_070565f833f9459aad223978a7a19b74';\n\n        // First, verify the API key\n        const verifyUrl = `${corsProxy}https://besttime.app/api/v1/keys?` + new URLSearchParams({\n          api_key_private: apiKey\n        });\n        const verifyResponse = await fetch(verifyUrl, {\n          headers: {\n            'Origin': 'http://localhost:3000'\n          }\n        });\n        const verifyData = await verifyResponse.json();\n        setDebugInfo(prev => ({\n          ...prev,\n          apiKeyVerification: verifyData\n        }));\n        if (verifyData.status !== 'OK') {\n          throw new Error('API key verification failed: ' + verifyData.message);\n        }\n\n        // If verification succeeds, proceed with the main request\n        const besttimeUrl = `${corsProxy}https://besttime.app/api/v1/forecasts?` + new URLSearchParams({\n          api_key_private: apiKey,\n          venue_name: name,\n          venue_address: address\n        });\n        setDebugInfo(prev => ({\n          ...prev,\n          besttimeUrl\n        }));\n        const response = await fetch(besttimeUrl, {\n          headers: {\n            'Origin': 'http://localhost:3000'\n          }\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        }\n        const data = await response.json();\n        setDebugInfo(prev => ({\n          ...prev,\n          besttimeResponse: data\n        }));\n        if (data.status !== 'OK') {\n          throw new Error(data.message || 'Failed to fetch forecast data');\n        }\n        setTrafficData(data);\n      } catch (err) {\n        setError(err.message || 'Failed to fetch traffic data. Please try again later.');\n        console.error('API Error:', err);\n        setDebugInfo(prev => ({\n          ...prev,\n          errorDetails: err.toString()\n        }));\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (name && address) {\n      fetchTrafficData();\n    } else {\n      setError('No venue information provided.');\n      setLoading(false);\n    }\n  }, []);\n\n  // ... (rest of the component remains the same)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-gray-200 p-4 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Debug Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"whitespace-pre-wrap\",\n        children: JSON.stringify(debugInfo, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"Lsxt0W0KPq+zF3atAGFmCQuMs3g=\");\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"names":["React","useState","useEffect","ArrowLeft","jsxDEV","_jsxDEV","ResultsPage","_s","trafficData","setTrafficData","loading","setLoading","error","setError","debugInfo","setDebugInfo","searchParams","URLSearchParams","window","location","search","name","get","address","fetchTrafficData","corsProxy","apiKey","verifyUrl","api_key_private","verifyResponse","fetch","headers","verifyData","json","prev","apiKeyVerification","status","Error","message","besttimeUrl","venue_name","venue_address","response","ok","errorText","text","data","besttimeResponse","err","console","errorDetails","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/study/gymspotcheck/src/ResultsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ArrowLeft } from 'lucide-react';\n\nconst ResultsPage = () => {\n  const [trafficData, setTrafficData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [debugInfo, setDebugInfo] = useState(null);\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const name = searchParams.get('name');\n    const address = searchParams.get('address');\n\n    const fetchTrafficData = async () => {\n      setDebugInfo(null);\n      try {\n        const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n        const apiKey = 'pri_070565f833f9459aad223978a7a19b74';\n\n        // First, verify the API key\n        const verifyUrl = `${corsProxy}https://besttime.app/api/v1/keys?` + \n          new URLSearchParams({ api_key_private: apiKey });\n        \n        const verifyResponse = await fetch(verifyUrl, {\n          headers: { 'Origin': 'http://localhost:3000' }\n        });\n        const verifyData = await verifyResponse.json();\n        setDebugInfo(prev => ({ ...prev, apiKeyVerification: verifyData }));\n\n        if (verifyData.status !== 'OK') {\n          throw new Error('API key verification failed: ' + verifyData.message);\n        }\n\n        // If verification succeeds, proceed with the main request\n        const besttimeUrl = `${corsProxy}https://besttime.app/api/v1/forecasts?` + \n          new URLSearchParams({\n            api_key_private: apiKey,\n            venue_name: name,\n            venue_address: address\n          });\n        \n        setDebugInfo(prev => ({ ...prev, besttimeUrl }));\n        \n        const response = await fetch(besttimeUrl, {\n          headers: { 'Origin': 'http://localhost:3000' }\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        }\n\n        const data = await response.json();\n        setDebugInfo(prev => ({ ...prev, besttimeResponse: data }));\n        \n        if (data.status !== 'OK') {\n          throw new Error(data.message || 'Failed to fetch forecast data');\n        }\n\n        setTrafficData(data);\n      } catch (err) {\n        setError(err.message || 'Failed to fetch traffic data. Please try again later.');\n        console.error('API Error:', err);\n        setDebugInfo(prev => ({ ...prev, errorDetails: err.toString() }));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (name && address) {\n      fetchTrafficData();\n    } else {\n      setError('No venue information provided.');\n      setLoading(false);\n    }\n  }, []);\n\n  // ... (rest of the component remains the same)\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      {/* ... (existing JSX) */}\n      \n      <div className=\"mt-8 bg-gray-200 p-4 rounded\">\n        <h2 className=\"text-lg font-semibold mb-2\">Debug Information</h2>\n        <pre className=\"whitespace-pre-wrap\">{JSON.stringify(debugInfo, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}