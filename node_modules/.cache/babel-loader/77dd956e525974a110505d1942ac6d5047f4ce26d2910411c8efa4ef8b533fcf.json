{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\study\\\\gymspotcheck\\\\src\\\\ResultsPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultsPage = () => {\n  // ... (keep the existing state and useEffect hooks)\n\n  const getCurrentDayData = () => {\n    if (!trafficData || !trafficData.analysis) {\n      console.log('No traffic data available');\n      return null;\n    }\n    const amsterdamTime = new Date().toLocaleString(\"en-US\", {\n      timeZone: \"Europe/Amsterdam\"\n    });\n    const currentDay = new Date(amsterdamTime).getDay();\n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentDayName = dayNames[currentDay];\n    console.log('Current day:', currentDayName);\n    const dayData = trafficData.analysis.find(day => day.day_info.day_text === currentDayName);\n    if (!dayData) {\n      console.log('No data found for current day');\n      return null;\n    }\n    return dayData.day_raw.map((value, index) => ({\n      hour: index,\n      traffic: value,\n      label: `${index}:00`\n    }));\n  };\n  const renderForecastChart = () => {\n    const chartData = getCurrentDayData();\n    if (!chartData) {\n      console.log('No chart data available');\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this);\n    }\n    const currentHour = new Date().getHours();\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          vertical: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"label\",\n          interval: 3,\n          tick: {\n            fontSize: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [0, 100],\n          label: {\n            value: 'Foot Traffic %',\n            angle: -90,\n            position: 'insideLeft'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: (value, name) => [`${value}%`, 'Foot Traffic'],\n          labelFormatter: label => `${label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"traffic\",\n          fill: \"#8884d8\",\n          barSize: 20,\n          shape: props => {\n            const {\n              x,\n              y,\n              width,\n              height\n            } = props;\n            return /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: x,\n              y: y,\n              width: width,\n              height: height,\n              fill: props.index === currentHour ? '#ff7f50' : '#8884d8',\n              opacity: 0.8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ... (keep the rest of the component, including renderVenueInfo and the return statement)\n};\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","ResultsPage","getCurrentDayData","trafficData","analysis","console","log","amsterdamTime","Date","toLocaleString","timeZone","currentDay","getDay","dayNames","currentDayName","dayData","find","day","day_info","day_text","day_raw","map","value","index","hour","traffic","label","renderForecastChart","chartData","children","fileName","_jsxFileName","lineNumber","columnNumber","currentHour","getHours","width","height","data","strokeDasharray","vertical","dataKey","interval","tick","fontSize","domain","angle","position","formatter","name","labelFormatter","fill","barSize","shape","props","x","y","opacity","_c","$RefreshReg$"],"sources":["C:/Users/study/gymspotcheck/src/ResultsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst ResultsPage = () => {\n  // ... (keep the existing state and useEffect hooks)\n\n  const getCurrentDayData = () => {\n    if (!trafficData || !trafficData.analysis) {\n      console.log('No traffic data available');\n      return null;\n    }\n\n    const amsterdamTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Europe/Amsterdam\"});\n    const currentDay = new Date(amsterdamTime).getDay();\n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentDayName = dayNames[currentDay];\n\n    console.log('Current day:', currentDayName);\n\n    const dayData = trafficData.analysis.find(day => day.day_info.day_text === currentDayName);\n    \n    if (!dayData) {\n      console.log('No data found for current day');\n      return null;\n    }\n\n    return dayData.day_raw.map((value, index) => ({\n      hour: index,\n      traffic: value,\n      label: `${index}:00`\n    }));\n  };\n\n  const renderForecastChart = () => {\n    const chartData = getCurrentDayData();\n    if (!chartData) {\n      console.log('No chart data available');\n      return <p>No data available for today</p>;\n    }\n\n    const currentHour = new Date().getHours();\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n          <XAxis \n            dataKey=\"label\" \n            interval={3}\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis \n            domain={[0, 100]}\n            label={{ value: 'Foot Traffic %', angle: -90, position: 'insideLeft' }}\n          />\n          <Tooltip \n            formatter={(value, name) => [`${value}%`, 'Foot Traffic']}\n            labelFormatter={(label) => `${label}`}\n          />\n          <Bar \n            dataKey=\"traffic\" \n            fill=\"#8884d8\" \n            barSize={20}\n            shape={(props) => {\n              const { x, y, width, height } = props;\n              return (\n                <rect \n                  x={x} \n                  y={y} \n                  width={width} \n                  height={height} \n                  fill={props.index === currentHour ? '#ff7f50' : '#8884d8'}\n                  opacity={0.8}\n                />\n              );\n            }}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  // ... (keep the rest of the component, including renderVenueInfo and the return statement)\n\n};\n\nexport default ResultsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}